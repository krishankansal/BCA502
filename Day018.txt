BCA- 502 Java Programming and Dynamic Webpage Design
-----------------------------------------------------
All necessary material can be found at
https://github.com/krishankansal/BCA502.git  

There are two phrases through which our program passes
1. Compilation Phase.(Compile time errors)
	syntactical errors
	type error
2. Run Phrase. (Runtime errors)
	int age = 450000000000000000000000000;



Java Exceptions

When executing Java code, different errors can occur: coding errors made by 
the programmer, errors due to wrong input, or other unforeseeable things.

When an error occurs, Java will normally stop and generate an error message. 
The technical term for this is: Java will throw an exception (throw an error).


   
Q. What is an exception?

A. An Exception is an unwanted event that interrupts the normal flow of 
the program. When an exception occurs program execution gets terminated. 
In such cases we get a system generated error message. 
The good thing about exceptions is that they can be handled in Java. 
By handling the exceptions we can provide a meaningful message to the user 
about the issue rather than a system generated message, 
which may not be understandable to a user.


Q. What is Exception Handling?

A. If an exception occurs, which has not been handled by programmer then program
 execution gets terminated and a system generated error message is shown to 
 the user. For example look at the system generated exception below in class A:

class A {
	public static void main(String args[]) {
    	int d = 0;
    	int a = 42 / d;
	}
} 

This message is not user friendly so a user will not be able to understand 
what went wrong. In order to let them know the reason in simple language, 
we handle exceptions. We handle such conditions and then prints a 
user friendly warning message to user, which lets them correct the error 
as most of the time exception occurs due to bad data provided by user.

Q. What is Advantage of exception handling?

A. Exception handling ensures that the flow of the program doesn’t break 
when an exception occurs. For example, if a program has bunch of statements and 
an exception occurs mid way after executing certain statements then the 
statements after the exception will not execute and the program will 
terminate abruptly.

Q. Try Catch in Java – Exception handling
A. Try block
The try block contains set of statements where an exception can occur. 
A try block is always followed by a catch block, which handles the exception 
that occurs in associated try block. 
A try block must be followed by catch blocks or finally block or both.

Catch block
A catch block is where you handle the exceptions, this block must follow the 
try block. A single try block can have several catch blocks associated with it. 
You can catch different exceptions in different catch blocks. 
When an exception occurs in try block, the corresponding catch block that 
handles that particular exception executes. 
For example if an arithmetic exception occurs in try block then the 
statements enclosed in catch block for arithmetic exception executes.

class A {
  public static void main(String args[]) {
    int d, a;

    try { 
    	System.out.println("This will be printed.");
    	d = 0;
      	a = 42 / d;
      	System.out.println("This will not be printed.");
    } catch (ArithmeticException e) { 
      	System.out.println("You connot divide a number by zero.");
    }
    System.out.println("After catch statement.");
  }
}  

Multiple catch blocks in Java

class A {
  public static void main(String args[]) {
    try {
      int a = args.length;
      System.out.println("a = " + a);
      int b = 42 / a;
      int c[] = { 1 };
      c[42] = 99;
    } catch(ArithmeticException e) {
      System.out.println("Divide by 0: " + e);
    } catch(ArrayIndexOutOfBoundsException e) {
      System.out.println("Array index oob: " + e);
    }
    System.out.println("After try/catch blocks.");
  }
}





